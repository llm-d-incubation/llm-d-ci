apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: scheduler-routing-pipeline
  labels:
    build.appstudio.redhat.com/pipeline: "scheduler-routing"
spec:
  params:
    - name: SNAPSHOT
      type: string
      description: Application snapshot with components and image URLs

  results:
    - name: test-output
      value: "$(tasks.test.results.test-output)"

  tasks:
    - name: deploy
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
      taskSpec:
        params:
          - name: SNAPSHOT
        steps:
          - name: deploy
            image: quay.io/openshift/origin-cli:latest
            script: |
              #!/bin/bash
              set -e
              dnf -y install jq
              snapshotComponents=$(jq -c '.components[]' <<< "$(params.SNAPSHOT)")

              echo -e "Example test task for the Snapshot:\n $(params.SNAPSHOT)"
              # Run custom tests for the given Snapshot here
              while read componentEntry
              do
                # Variables
                componentName=$(echo "${componentEntry}" | jq -r '.name')
                componentUrl=$(echo "${componentEntry}" | jq -r '.source.git.url')
                componentUrlWithoutSuffix=$(echo $componentUrl | sed 's/\.git$//')
                componentSha=$(echo "${componentEntry}" | jq -r '.source.git.revision')

                echo "Print the information for component ${componentName} included in snapshot, more test can be added to inspect git source and containerImage in component::"
                echo "${componentName}"
                echo "${componentUrl}"
                echo "${componentUrlWithoutSuffix}"
                echo "${componentSha}"
              done < <(echo "$snapshotComponents")

              SNAPSHOT='$(params.SNAPSHOT)'
              SCHEDULER_IMAGE=$(echo "$SNAPSHOT" | jq -r '.components[] | select(.name | test("inference-scheduler")) | .containerImage')
              SIDECAR_IMAGE=$(echo "$SNAPSHOT" | jq -r '.components[] | select(.name | test("routing-sidecar")) | .containerImage')

              echo "Deploying with:"
              echo "  Scheduler Image: $SCHEDULER_IMAGE"
              echo "  Sidecar Image: $SIDECAR_IMAGE"

              oc apply -f - <<EOF
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: scheduler
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: scheduler
                template:
                  metadata:
                    labels:
                      app: scheduler
                  spec:
                    containers:
                    - name: scheduler
                      image: $SCHEDULER_IMAGE
                      ports:
                        - containerPort: 8080
              ---
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: routing-sidecar
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: routing-sidecar
                template:
                  metadata:
                    labels:
                      app: routing-sidecar
                  spec:
                    containers:
                    - name: routing-sidecar
                      image: $SIDECAR_IMAGE
                      env:
                        - name: SCHEDULER_HOST
                          value: "http://scheduler:8080"
                      ports:
                        - containerPort: 8090
              EOF

    - name: test
      runAfter: [deploy]
      taskSpec:
        results:
          - name: test-output
            description: JSON-encoded test result
        steps:
          - name: test
            image: registry.access.redhat.com/ubi8/python-39
            script: |
              sleep 10
              output=$(curl -s -X POST http://routing-sidecar:8090/inference -H "Content-Type: application/json" -d '{"input": "ping"}')

              echo "$output" | grep -q '"status": "ok"'
              if [ $? -eq 0 ]; then
                RESULT="SUCCESS"
              else
                RESULT="FAILURE"
              fi

              TEST_OUTPUT=$(jq -rc --arg date $(date -u --iso-8601=seconds) --arg RESULT "$RESULT" --null-input \
                '{result: $RESULT, timestamp: $date, failures: ($RESULT == "FAILURE" | if . then 1 else 0 end), successes: ($RESULT == "SUCCESS" | if . then 1 else 0 end), warnings: 0}')
              echo -n "${TEST_OUTPUT}" | tee $(results.test-output.path)
