apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: scheduler-routing-pipeline
  labels:
    build.appstudio.redhat.com/pipeline: "scheduler-routing"
spec:
  params:
    - name: SNAPSHOT
      type: string
      description: Application snapshot with components and image URLs

  results:
    - name: test-output
      value: "$(tasks.test.results.test-output)"

  tasks:
    - name: deploy
      params:
        - name: SNAPSHOT
          value: '$(params.SNAPSHOT)'
      taskSpec:
        params:
          - name: SNAPSHOT
        steps:
          - name: deploy
            image: quay.io/openshift/origin-cli:latest
            script: |
              #!/bin/bash
              set -e
              dnf -y install jq

              SNAPSHOT='$(params.SNAPSHOT)'
              echo -e "Full Snapshot JSON:\n$SNAPSHOT"

              # Extract and print scheduler component info
              SCHEDULER_COMPONENT=$(echo "$SNAPSHOT" | jq -c '.components[] | select(.name | test("inference-scheduler"))')
              SCHEDULER_NAME=$(echo "$SCHEDULER_COMPONENT" | jq -r '.name')
              SCHEDULER_URL=$(echo "$SCHEDULER_COMPONENT" | jq -r '.source.git.url')
              SCHEDULER_SHA=$(echo "$SCHEDULER_COMPONENT" | jq -r '.source.git.revision')
              SCHEDULER_IMAGE=$(echo "$SCHEDULER_COMPONENT" | jq -r '.containerImage')
              SCHEDULER_URL_CLEAN=$(echo "$SCHEDULER_URL" | sed 's/\.git$//')

              echo "Scheduler Component:"
              echo "  Name: $SCHEDULER_NAME"
              echo "  Repo: $SCHEDULER_URL"
              echo "  Repo (clean): $SCHEDULER_URL_CLEAN"
              echo "  SHA: $SCHEDULER_SHA"
              echo "  Image: $SCHEDULER_IMAGE"

              # Extract and print sidecar component info
              SIDECAR_COMPONENT=$(echo "$SNAPSHOT" | jq -c '.components[] | select(.name | test("routing-sidecar"))')
              SIDECAR_NAME=$(echo "$SIDECAR_COMPONENT" | jq -r '.name')
              SIDECAR_URL=$(echo "$SIDECAR_COMPONENT" | jq -r '.source.git.url')
              SIDECAR_SHA=$(echo "$SIDECAR_COMPONENT" | jq -r '.source.git.revision')
              SIDECAR_IMAGE=$(echo "$SIDECAR_COMPONENT" | jq -r '.containerImage')
              SIDECAR_URL_CLEAN=$(echo "$SIDECAR_URL" | sed 's/\.git$//')

              echo "Routing Sidecar Component:"
              echo "  Name: $SIDECAR_NAME"
              echo "  Repo: $SIDECAR_URL"
              echo "  Repo (clean): $SIDECAR_URL_CLEAN"
              echo "  SHA: $SIDECAR_SHA"
              echo "  Image: $SIDECAR_IMAGE"

              SCHEDULER_IMAGE=$(echo "$SNAPSHOT" | jq -r '.components[] | select(.name | test("inference-scheduler")) | .containerImage')
              SIDECAR_IMAGE=$(echo "$SNAPSHOT" | jq -r '.components[] | select(.name | test("routing-sidecar")) | .containerImage')

              # Provide default values if images are empty or null
              DEFAULT_SCHEDULER_IMAGE="quay.io/llm-d/user-ns1/llm-d-inference-scheduler-d79d9:latest"
              DEFAULT_SIDECAR_IMAGE="quay.io/llm-d/user-ns1/llm-d-routing-sidecar-b03d5:latest"
              
              if [[ -z "$SCHEDULER_IMAGE" || "$SCHEDULER_IMAGE" == "null" ]]; then
                echo "Scheduler image not found in snapshot, using default: $DEFAULT_SCHEDULER_IMAGE"
                SCHEDULER_IMAGE="$DEFAULT_SCHEDULER_IMAGE"
              fi
              
              if [[ -z "$SIDECAR_IMAGE" || "$SIDECAR_IMAGE" == "null" ]]; then
                echo "Sidecar image not found in snapshot, using default: $DEFAULT_SIDECAR_IMAGE"
                SIDECAR_IMAGE="$DEFAULT_SIDECAR_IMAGE"
              fi

              echo "Deploying with:"
              echo "  Scheduler Image: $SCHEDULER_IMAGE"
              echo "  Sidecar Image: $SIDECAR_IMAGE"

              oc apply -f - <<EOF
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: scheduler
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: scheduler
                template:
                  metadata:
                    labels:
                      app: scheduler
                  spec:
                    containers:
                    - name: scheduler
                      image: $SCHEDULER_IMAGE
                      ports:
                        - containerPort: 8080
              ---
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: routing-sidecar
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: routing-sidecar
                template:
                  metadata:
                    labels:
                      app: routing-sidecar
                  spec:
                    containers:
                    - name: routing-sidecar
                      image: $SIDECAR_IMAGE
                      env:
                        - name: SCHEDULER_HOST
                          value: "http://scheduler:8080"
                      ports:
                        - containerPort: 8090
              EOF

    - name: test
      runAfter: [deploy]
      taskSpec:
        results:
          - name: test-output
            description: JSON-encoded test result
        steps:
          - name: test
            image: registry.access.redhat.com/ubi8/python-39
            script: |
              echo "Running integration test for scheduler and routing sidecar..."
              # sleep 10
              # output=$(curl -s -X POST http://routing-sidecar:8090/inference -H "Content-Type: application/json" -d '{"input": "ping"}')

              # echo "Raw output:"
              # echo "$output"

              # echo "$output" | grep -q '"status": "ok"'
              # if [ $? -eq 0 ]; then
              #   RESULT="SUCCESS"
              # else
              #   RESULT="FAILURE"
              # fi

              # TEST_OUTPUT=$(jq -rc --arg date "$(date -u --iso-8601=seconds)" --arg RESULT "$RESULT" --null-input \
              #   '{result: $RESULT, timestamp: $date, failures: ($RESULT == "FAILURE" | if . then 1 else 0 end), successes: ($RESULT == "SUCCESS" | if . then 1 else 0 end), warnings: 0}')

              # echo "$TEST_OUTPUT" | tee /tekton/results/test-output || true