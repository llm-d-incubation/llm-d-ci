apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: scheduler-routing-pipeline
  labels:
    build.appstudio.redhat.com/pipeline: "scheduler-routing"
spec:
  params:
    - name: SNAPSHOT
      type: string
      description: Application snapshot with components and image URLs

  results:
    - name: test-output
      value: "$(tasks.test.results.test-output)"

  tasks:
    - name: extract-images
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
      taskSpec:
        params:
          - name: SNAPSHOT
        results:
          - name: SCHEDULER_IMAGE
          - name: SIDECAR_IMAGE
          - name: SCHEDULER_IMAGE_EMPTY
          - name: SIDECAR_IMAGE_EMPTY
        steps:
          - name: extract
            image: quay.io/openshift/origin-cli:latest
            script: |
              #!/bin/bash
              set -e
              dnf -y install jq

              SNAPSHOT='$(params.SNAPSHOT)'

              SCHEDULER_IMAGE=$(echo "$SNAPSHOT" | jq -r '.components[] | select(.name | test("inference-scheduler")) | .containerImage // empty')
              SIDECAR_IMAGE=$(echo "$SNAPSHOT" | jq -r '.components[] | select(.name | test("routing-sidecar")) | .containerImage // empty')

              echo "$SCHEDULER_IMAGE" > $(results.SCHEDULER_IMAGE.path)
              echo "$SIDECAR_IMAGE" > $(results.SIDECAR_IMAGE.path)

              if [[ -z "$SCHEDULER_IMAGE" ]]; then echo "true" > $(results.SCHEDULER_IMAGE_EMPTY.path); else echo "false" > $(results.SCHEDULER_IMAGE_EMPTY.path); fi
              if [[ -z "$SIDECAR_IMAGE" ]]; then echo "true" > $(results.SIDECAR_IMAGE_EMPTY.path); else echo "false" > $(results.SIDECAR_IMAGE_EMPTY.path); fi

    - name: get-scheduler-image
      when:
        - input: "$(tasks.extract-images.results.SCHEDULER_IMAGE_EMPTY)"
          operator: in
          values: ["true"]
      taskRef:
        name: component-image
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-component-image:latest
      params:
        - name: COMPONENT_NAME
          value: llm-d-inference-scheduler-d79d9

    - name: get-sidecar-image
      when:
        - input: "$(tasks.extract-images.results.SIDECAR_IMAGE_EMPTY)"
          operator: in
          values: ["true"]
      taskRef:
        name: component-image
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-component-image:latest
      params:
        - name: COMPONENT_NAME
          value: llm-d-routing-sidecar-b03d5

    - name: deploy
      runAfter: [extract-images, get-scheduler-image, get-sidecar-image]
      taskSpec:
        params:
          - name: SCHEDULER_IMAGE
          - name: SIDECAR_IMAGE
        steps:
          - name: deploy
            image: quay.io/openshift/origin-cli:latest
            script: |
              #!/bin/bash
              set -e
              SCHEDULER_IMAGE="$(params.SCHEDULER_IMAGE)"
              SIDECAR_IMAGE="$(params.SIDECAR_IMAGE)"

              echo "Deploying with:"
              echo "  Scheduler Image: $SCHEDULER_IMAGE"
              echo "  Sidecar Image: $SIDECAR_IMAGE"

              oc apply -f - <<EOF
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: scheduler
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: scheduler
                template:
                  metadata:
                    labels:
                      app: scheduler
                  spec:
                    containers:
                    - name: scheduler
                      image: $SCHEDULER_IMAGE
                      ports:
                        - containerPort: 8080
              ---
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: routing-sidecar
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: routing-sidecar
                template:
                  metadata:
                    labels:
                      app: routing-sidecar
                  spec:
                    containers:
                    - name: routing-sidecar
                      image: $SIDECAR_IMAGE
                      env:
                        - name: SCHEDULER_HOST
                          value: "http://scheduler:8080"
                      ports:
                        - containerPort: 8090
              EOF
      params:
        - name: SCHEDULER_IMAGE
          value: $(tasks.get-scheduler-image.results.IMAGE_URL)
        - name: SIDECAR_IMAGE
          value: $(tasks.get-sidecar-image.results.IMAGE_URL)

    - name: test
      runAfter: [deploy]
      taskSpec:
        results:
          - name: test-output
        steps:
          - name: test
            image: registry.access.redhat.com/ubi8/python-39
            script: |
              sleep 10
              output=$(curl -s -X POST http://routing-sidecar:8090/inference -H "Content-Type: application/json" -d '{"input": "ping"}')

              if echo "$output" | grep -q '"status": "ok"'; then
                RESULT="SUCCESS"
              else
                RESULT="FAILURE"
              fi

              TEST_OUTPUT=$(jq -rc --arg date $(date -u --iso-8601=seconds) --arg RESULT "$RESULT" --null-input \
                '{result: $RESULT, timestamp: $date, failures: ($RESULT == "FAILURE" | if . then 1 else 0 end), successes: ($RESULT == "SUCCESS" | if . then 1 else 0 end), warnings: 0}')
              echo -n "$TEST_OUTPUT" | tee $(results.test-output.path)
